#!/usr/bin/env bash
LC_ALL=C
version="refractainstaller 9.0.9beta6 (20131206)"
# Based on refractainstaller-8.0.3 by Dean Linkous
# Licence: GPL-3

source /usr/bin/variables

show_help () {
	printf "$help_text"
	exit 0
}

help_text="
	Usage:  $0  [option]
	
	Run with no options to install a running live-CD or live-usb-hdd
	to a hard drive. 
	
	If you want to use the graphical version, run refractainstaller-gui
	from a terminal or run Refracta Installer from the System menu.
	
	valid options:
		-h, --help		show this help text
		-v, --version	display the version information
		-d. --debug		debug mode
		
"
while [[ $1 == -* ]]; do
	case "$1" in
	
		-h|--help)
			show_help ;;
		
		-v|--version)
			printf "\n$version\n\n" 
			exit 0 ;;
			
		-d|--debug)
			DEBUG="yes"
			break ;;
		
		*) 
			printf "\t invalid option: $1 \n\n"
			printf "\t Try:  $0 -h for full help. \n\n"
			exit 1 ;;
    esac
done		

[[ $(id -u) -eq 0 ]] || { echo -e "\t You need to be root!\n" ; exit 1 ; }

refractainstaller_configuration () {
if [[ -f $configfile ]]; then
    source $configfile
else
	echo "
	Config file $configfile is missing
	Proceeding with default settings...
"
fi

error_log=${error_log:="/var/log/refractainstaller_error.log"}
rsync_excludes=${rsync_excludes:="/usr/lib/refractainstaller/installer_exclude.list"}
home_boot_excludes=${home_boot_excludes:="/usr/lib/refractainstaller/home_boot_exclude.list"}
swapfile_blocksize=${swapfile_blocksize:="1024"}
swapfile_count=${swapfile_count:="262144"}
pmount_fixed=${pmount_fixed:="no"}
enable_updatedb=${enable_updatedb:="yes"}
enable_freshclam=${enable_freshclam:="yes"}
root_ssh=${root_ssh:="no"}
}

refractainstaller_configuration

exec 2>"$error_log"

if [[ $DEBUG = "yes" ]] ; then
	set -x
fi

if ! [[ -d /lib/live/mount/rootfs ]] ; then
	echo " ###	WARNING: Not running from live-CD or live-USB	### 
 ###	or unsupported configuration. Be sure you know	### 
 ###	what you are doing. This may not work.		### 
 
 Press ENTER to proceed or ctrl-c to exit. "
 read -p " "
fi

if [[ $run_preinstall = "yes" ]] ; then
	for file in /home/user/pre-install/* ; do
		if [[ -x $file ]] ; then
			bash $file
		fi
	done
fi

check_exit () {
[[ $? -eq 0 ]] || { echo "
  
  Exit due to error:  $?
  See $error_log for details.
  "
  exit 1 ; }
}

if ! [[ -f  $rsync_excludes ]] ; then
    echo "
 There is no rsync excludes file, or its name does not match what
 this script expects. You should let the script create one, or if
 you have a custom excludes file, and you know what you're doing,
 you can exit the script and edit the rsync_excludes variable at 
 the top so that it matches the name and path of your custom file.

 Press ENTER to proceed or hit ctrl-c to exit. "
    read -p " "
    rsync_excludes="$(pwd)/installer_exclude.list"
    echo " Creating rsync excludes file, $rsync_excludes
 "
    sleep 2
    cat > "$rsync_excludes" <<EOF
# It is safe to delete this file after installation.

- /dev/*
- /cdrom/*
- /media/*
- /target
- /swapfile
- /mnt/*
- /sys/*
- /proc/*
- /tmp/*
- /live
- /boot/grub/grub.cfg
- /boot/grub/menu.lst
- /boot/grub/device.map
- /etc/udev/rules.d/70-persistent-cd.rules
- /etc/udev/rules.d/70-persistent-net.rules
- /etc/fstab
- /etc/mtab
- /home/snapshot
- /home/*/.gvfs
EOF
check_exit
chmod 666 "$rsync_excludes"
fi 

while true; do
    echo -n " 
 You need to have a partition ready for the installation. If you 
 haven't already done that, you can run the partition editor now.
 If you want a separate /home partition, you should create it at 
 this time, this script will ask you later if you've done that.
 
 Choices (enter number):
     1. GParted
     2. cfdisk
     3. No thanks, I already have a partition prepared. Continue.
     4. I'd like to exit the script now.
    "
    read ans
    case $ans in
      1) if ! [[ -f /usr/sbin/gparted ]]; then
			while true; do
				echo "
 GParted is not installed. Would you like to use cfdisk instead?
				
	Yes (use cfdisk)
	No (exit the script)
"
				
				read ans
				case $ans in
				  [Yy]*) cfdisk ; break ;;
				  [Nn]*) exit 0 ;;
				esac
			done
		 elif ! [[ $DISPLAY ]]; then
			while true; do
				echo "
 GParted requires a graphical environment.
 Would you like to use cfdisk instead?
				
	Yes (use cfdisk)
	No (exit the script)
"
				
				read ans
				case $ans in
				  [Yy]*) cfdisk ; break ;;
				  [Nn]*) exit 0 ;;
				esac
			done
		 
		 else
			gparted
		 fi
		 break ;;
      2) cfdisk ; break ;;
      3) break ;;
      4) exit 0 ;;
    esac
done

while true; do
    echo -n "
 Would you like fdisk to show you what drives and partitions
 are available? (y/N): "
    read ans
    case $ans in
      [Yy]*) fdisk -l ; break ;;
      *) break ;;
    esac
done

echo -n "

 Where would you like the GRUB bootloader to be installed?
 (probably a drive, like /dev/sda) 
 
 If you don't want to install the bootloader, leave this blank.
 You will need to do some manual configuration after the install.:
 "
read grub_dev

if [[ -n $grub_dev ]] ; then
    [[ -b $grub_dev ]] || { echo "$grub_dev is not a block device. " ; exit 1 ; }
fi

if [[ ${grub_dev:8:1} = [1-9] ]] ; then
	grub_partition="$grub_dev"
fi

echo -n "

 If you created a separate partition for /boot, enter it here.
 To skip this, just hit the ENTER key.
 
 (give the full device name, like /dev/sda1): "
 
read boot_dev
echo "$boot_dev"
if ! [[ -z $boot_dev ]] && ! [[ -b $boot_dev ]] ; then
    echo " $boot_dev does not exist!
 You may continue and install without a separate boot partition,
 or you can hit ctrl-c to exit, then re-run the script, and
 be sure to create a partition for /boot.
    "
    boot_dev=
    echo "Press ENTER when you're ready to continue"
    read -p " "
fi

if [[ -n $boot_dev ]] ; then
    while true; do
        echo -n "
    
 What type of filesystem would you like on $boot_dev?
 
 Choices (enter number):
    2) ext2 (recommended for /boot)
    3) ext3
    4) ext4
   "
        read ans
        case $ans in
          2) fs_type_boot="ext2" ; break ;;
          3) fs_type_boot="ext3" ; break ;;
          4) fs_type_boot="ext4" ; break ;;
        esac
    done
fi

echo -n "

 Which partition would you like to use for the installation
 of the operating system?
 
 (give the full device name, like /dev/sda1): "
read install_dev
[[ -b $install_dev ]] || { echo "$install_dev does not exist! " ; exit 1 ; }

while true; do
    echo -n "
    
 What type of filesystem would you like on $install_dev?
 
 Choices (enter number):
    2) xfs
    3) btrfs
    4) ext4
   "
    read ans
    case $ans in
      2) fs_type_os="xfs" ; break ;;
      3) fs_type_os="btrfs" ; break ;;
      4) fs_type_os="ext4" ; break ;;
    esac
done

while true; do
    echo -n "

 Do you want the operating system on an encrypted partition?
 (yes or no)
 "
    read ans
    case $ans in
      [Yy]*) encrypt_os="yes"
             if ! [[ -f /sbin/cryptsetup ]]; then
                 while true; do
                     echo " Cryptsetup is not installed. You need to
 install it and run the command, 'sudo modprobe dm-mod'
 before you can use encryption.Do you want to proceed
 without encrypting the partition?
 (y or n)
 
      Yes) Proceed without encrypting the partition
       No) Exit
       "
                    read ans
                    case $ans in
                      [Yy]*) encrypt_os="no" ; break 2 ;;
                      [Nn]*) exit 1 ;;
                    esac
                done
             fi

             if [[ -z $boot_dev ]] ; then
                 while true; do
                     echo " You MUST have a separate, unencrypted /boot partition
 if you intend to boot an encrypted operating system.
 You can proceed without encrypting the root filesystem,
 or you can exit and start over.Do you want to proceed
 without encrypting the partition?
 (y or n)
 
      Yes) Proceed without encrypting the partition
       No) Exit
       "
                    read ans
                    case $ans in
                      [Yy]*) break ;;
                      [Nn]*) exit 1 ;;
                    esac
                done
            fi
            break ;;
      [Nn]*) encrypt_os="no"  ; break ;;
    esac
done

echo -n "

  If you created a separate partition for /home, 
  enter the full device name. However, if you're 
  installing everything to one partition, you should
  leave this blank.

  /home partition (if one exists): "
read home_dev
if [[ -n $home_dev ]] && ! [[ -b $home_dev ]] ; then
    echo "
    $home_dev does not exist!
    You may continue and install everything to one partition,
    or you can hit ctrl-c to exit, then re-run the script, and
    be sure to create a partition for /home.
    "
    home_dev=
    echo "Press ENTER when you're ready to continue"
    read -p " "
fi

if [[ -n $home_dev ]] ; then
    while true; do
        echo -n "
        
 What type of filesystem would you like on $home_dev?
 
 Choices (enter number):
    2) xfs
    3) btrfs
    4) ext4
   "
        read ans
        case $ans in
          2) fs_type_home="xfs" ; break ;;
          3) fs_type_home="btrfs" ; break ;;
          4) fs_type_home="ext4" ; break ;;
        esac
    done
fi

if [[ -n $home_dev ]] ; then
    while true; do
        echo -n "
        
 Do you want /home on an encrypted partition?
 (yes or no)
 "
    read ans
    case $ans in
      [Yy]*) encrypt_home="yes"
             if ! [[ -f /sbin/cryptsetup ]]; then
                 while true; do
                     echo " Cryptsetup is not installed. You need to
 install it and run the command, 'sudo modprobe dm-mod'
 before you can use encryption. Do you want to proceed
 without encrypting the partition?
 (y or n)
 
      Yes) Proceed without encrypting the partition
       No) Exit
       "
                    read ans
                    case $ans in
                      [Yy]*) encrypt_home="no" ; break 2 ;;
                      [Nn]*) exit 1 ;;
                    esac
                done
             fi
             break ;;
      [Nn]*) encrypt_home="no"  ; break ;;
    esac
    done
fi

while true; do
	echo -n "
 Would you like fstab to use the UUID to identify filesystems?
 This is useful if your drive order changes between reboots.
	(y/N)
 " 
 	read ans
	case $ans in
		[Yy]*) 	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
					uuid_message="--> UUIDs in fstab won't work with encrypted filesystems and
    will not be used. Edit fstab manually after the installation."
				else
					use_uuid="yes"
				fi
				break ;;
		*)	break ;;
	esac
done

fix_hostname () {
while true; do
	echo -n "
 Illegal hostname. Try again.
	
 You can use alphanumeric characters anywhere in the hostname, and 
 you can use the minus sign (-) as long as it's not at the beginning 
 or end.

New hostname: "

	read new_hostname
	break
done
	test_hostname	
}

test_hostname () {
	if [[ $new_hostname =~ [_]|[@]|[~]|[\!]|[\#]|[=]|[+]|[\&]|[\^]|[\$]|[%]|[\(]|[\)]|[\*]|[\:]|[\;]|[\"]|[\']|[\`]|[,]|[.]|[\<]|[\>]|[\?]|[\{]|[\}]|[\[]|[\]]|[/]|[\|]|[\ ] ]]; then
 		fix_hostname
	elif [[ $new_hostname = -* ]] || [[ $new_hostname = *- ]]; then
		fix_hostname
	elif [[ -z $new_hostname ]]; then
		new_hostname="$HOSTNAME"
	fi
}

select_hostname () {
while true; do
	echo -n "
 The current hostname is ${HOSTNAME}. To change that, enter the new
 hostname here. To leave it unchanged, just press ENTER.

New hostname: "

	read new_hostname
	break
done
	test_hostname
}

select_hostname

new_hostname=${new_hostname:="$HOSTNAME"}

if [[ -z $grub_dev ]] ; then
    grub_dev_message="--> Bootloader will not be installed."
else
    grub_dev_message="--> Bootloader will be installed in $grub_dev"
fi

if [[ $encrypt_os = yes ]] ; then
    os_enc_message=", and will be encrypted."
fi

if [[ -z $home_dev ]] ; then
    home_dev_message="--> /home will not be on a separate partition."
else
    home_dev_message="--> /home will be installed on $home_dev and formatted as $fs_type_home"
fi

if [[ -n $home_dev ]] && [[ $encrypt_home = yes ]] ; then
    home_enc_message=", and will be encrypted."
fi

if [[ -n $boot_dev ]] ; then
    boot_dev_message="--> /boot will be installed on $boot_dev and formatted as $fs_type_boot."
fi


while true; do
    echo "  
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                SUMMARY OF WHAT WILL BE DONE
    
 $grub_dev_message
 --> Operating system will be installed on $install_dev
     and formatted as $fs_type_os$os_enc_message
 $home_dev_message$home_enc_message
 $boot_dev_message
 $uuid_message
 Hostname: $new_hostname
   
 WARNING: This is your last chance to exit before any changes are made.
 
 Proceed with the installation?  (yes or no)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 "
    read ans
    case $ans in
      [Yy]*) break ;;
      [Nn]*) exit 0 ;;
    esac
done

cleanup () {
echo -e "\n Cleaning up...\n"
if $(df | grep -q /target/proc/) ; then
    umount /target/proc/
fi

if $(df | grep -q /target/dev/) ; then
    umount /target/dev/
fi

if $(df | grep -q /target/sys/) ; then
    umount /target/sys/
fi

if $(df | grep -q /target_boot) ; then
    umount -l /target_boot/
fi

if $(df | grep -q /target_home) ; then
    umount -l /target_home/
fi

if $(df | grep -q /target) ; then
    umount -l /target/
fi

if $(df | grep -q $install_dev) ; then
    umount $install_dev
fi    

if $(df | grep "\/dev\/mapper\/root_fs") ; then
    umount /dev/mapper/root_fs
fi

if [[ -h /dev/mapper/root_fs ]] ; then
    cryptsetup luksClose /dev/mapper/root_fs
fi

if $(df | grep -q $home_dev) ; then
    umount $home_dev
fi

if $(df | grep -q "\/dev\/mapper\/home_fs") ; then
    umount /dev/mapper/home_fs
fi

if [[ -h /dev/mapper/home_fs ]] ; then
    cryptsetup luksClose home_fs
fi

if $(df | grep -q $boot_dev) ; then
    umount -l $boot_dev
fi

if [[ -d /target ]] ; then
    rm -rf /target
fi

if [[ -d /target_home ]] ; then
    rm -rf /target_home
fi

if [[ -d /target_boot ]] ; then
    rm -rf /target_boot
fi
}

cleanup

echo -e "\n Creating filesystem on $install_dev...\n"
mkdir /target ;  check_exit
if [[ $encrypt_os = yes ]] ; then
    echo " You will need to create a passphrase."
    cryptsetup luksFormat "$install_dev" ; check_exit
    echo "Encrypted partition created. Opening it..."
    cryptsetup luksOpen "$install_dev" root_fs ; check_exit
    install_part="/dev/mapper/root_fs"
else
    install_part="$install_dev"
fi 
if [[ $fs_type_os = ext4 ]];then
	mkfs.$fs_type_os -F "$install_part" ; check_exit
	tune2fs -r 10000 "$install_part" ; check_exit
else
	mkfs.$fs_type_os -f "$install_part" ; check_exit
fi 
mount "$install_part" /target ; check_exit 

if [[ -n $home_dev ]] ; then
    echo "
    
 Creating filesystem on $home_dev...
    "
    mkdir /target_home ; check_exit
    if [[ $encrypt_home = yes ]]; then
        echo "
 You will need to create a passphrase.
 "
        cryptsetup luksFormat "$home_dev"
        check_exit
        echo "Encrypted partition created. Opening it..."
        cryptsetup luksOpen "$home_dev" home_fs
        check_exit
        home_part="/dev/mapper/home_fs"
    else
        home_part=$home_dev
fi
    if [[ $fs_type_os = ext4 ]];then
	mkfs.$fs_type_home -F "$home_part" ; check_exit
	tune2fs -r 10000 "$home_part" ; check_exit
    else
	mkfs.$fs_type_home -f "$home_part" ; check_exit
    fi
    mount "$home_part" /target_home ; check_exit
	sep_home_opt="--exclude=/home/*"
fi

if [[ -n $boot_dev ]] ; then
    mkdir /target_boot ; check_exit
	if [[ $fs_type_os = ext4 ]];then
		mkfs.$fs_type_boot -F $boot_dev ; check_exit
	else
		mkfs.$fs_type_boot -f $boot_dev ; check_exit
	fi
    mount $boot_dev /target_boot
    sep_boot_opt="--exclude=/boot/*"
fi

echo -e "\n Copying system to new partition...\n"
rsync -av / /target/ --exclude-from="$rsync_excludes" ${sep_home_opt} ${sep_boot_opt}  

if [[ -n $home_part ]] ; then
    echo -e "\n Copying home folders to new partition...\n"
    rsync -av /home/ /target_home/  --exclude-from="$home_boot_excludes"
fi

if [[ -n $boot_dev ]] ; then
    echo -e "\n Copying files to boot partitions...\n"
    rsync -av /boot/ /target_boot/  --exclude-from="$home_boot_excludes"
fi

echo -e "\n Making a swap file...\n"
dd if=/dev/zero of=/target/swapfile bs="$swapfile_blocksize" count="$swapfile_count" ; check_exit 
mkswap /target/swapfile ; check_exit 

if [[ -f /target/etc/pmount.allow ]] ; then
	if [[ $pmount_fixed = "no" ]] ; then
		sed -i 's:/dev/sd\[a-z\]:#/dev/sd\[a-z\]:' /target/etc/pmount.allow
	fi
fi

if [[ -e /target/usr/bin/updatedb.mlocate ]] ; then
	if ! [[ -x /target/usr/bin/updatedb.mlocate ]] ; then
		chmod +x /target/usr/bin/updatedb.mlocate
	fi
fi

while true; do
	echo -n " Disable auto-login?
	(Y/n)
	"
	read ans
	case $ans in
	[Nn]*) 	break ;;
	*)
 		disable_auto_desktop="yes"
			break ;;
	esac
done

if [[ $disable_auto_desktop = "yes" ]]; then

	#gdm
    if [[ -f /target/etc/gdm/gdm.conf ]]; then
        sed -i 's/^AutomaticLogin/#AutomaticLogin/' /target/etc/gdm/gdm.conf
    fi

	#gdm3
    if [[ -f /target/etc/gdm3/daemon.conf ]]; then
        sed -i 's/^AutomaticLogin/#AutomaticLogin/' /target/etc/gdm3/daemon.conf
    fi

	#lightdm
	if [[ -f /target/etc/lightdm/lightdm.conf ]]; then
		sed -i 's/^autologin/#autologin/g' /target/etc/lightdm/lightdm.conf
	fi

	#kdm
	if [ -f /target/etc/default/kdm.d/live-autologin ]; then
		rm -f /target/etc/default/kdm.d/live-autologin
	fi

	if [ -f /target/etc/kde3/kdm/kdmrc ]; then
		sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/kde3/kdm/kdmrc
		sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/kde3/kdm/kdmrc
	fi

	if [ -f /target/etc/kde4/kdm/kdmrc ]; then
		sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/kde4/kdm/kdmrc
		sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/kde4/kdm/kdmrc
	fi

	#trinity
	if [[ -f /target/etc/default/kdm-trinity.d/live-autologin ]]; then
		sed -i 's/^AUTOLOGIN/#AUTOLOGIN/g' /target/etc/default/kdm-trinity.d/live-autologin
	fi
	
	if [ -f /target/etc/trinity/kdm/kdmrc ]; then
		sed -i -e 's/^AutoLogin/#AutoLogin/g' /target/etc/trinity/kdm/kdmrc
		sed -i -e 's/^AutoReLogin/#AutoReLogin/g' /target/etc/trinity/kdm/kdmrc
	fi

	# console autologin
	if grep -q "respawn:/bin/login -f" /target/etc/inittab ; then
		mv /target/etc/inittab /target/etc/inittab.$(date +%Y%m%d_%H%M)
		cp /usr/lib/refractainstaller/inittab.debian /target/etc/inittab
	fi
fi

echo -e "\n Copying update-initramfs...\n"
if [[ -f /target/usr/sbin/update-initramfs.distrib ]] ; then
    cp /target/usr/sbin/update-initramfs.distrib /target/usr/sbin/update-initramfs
fi
if [[ -f /target/usr/sbin/update-initramfs.debian ]] ; then
    cp /target/usr/sbin/update-initramfs.debian /target/usr/sbin/update-initramfs
fi

if ! [[ $new_hostname = $HOSTNAME ]]; then
	sed -i "s/$HOSTNAME/$new_hostname/" /target/etc/hostname
	sed -i "s/$HOSTNAME/$new_hostname/g" /target/etc/hosts
fi

if [[ $encrypt_os != "yes" ]]; then
	if [[ $use_uuid = yes ]]; then
		install_part="$(blkid -s UUID $install_dev | awk '{ print $2 }' | sed 's/\"//g')"
	fi
fi
echo -e "\n Creating /etc/fstab...\n"
echo -e "proc\t\t/proc\tproc\tdefaults\t0\t0
/swapfile\tswap\tswap\tdefaults\t0\t0
$install_part\t/\t$fs_type_os\tdefaults,noatime\t0\t1" >> /target/etc/fstab
check_exit

if [[ -n $home_part ]] ; then
	if [[ $encrypt_home != "yes" ]]; then
		if [[ $use_uuid = yes ]]; then
			home_part="$(blkid -s UUID $home_dev | awk '{ print $2 }' | sed 's/\"//g')"
		fi
	fi
    echo -e "\n Adding /home entry to fstab...\n"
    echo -e "$home_part\t/home\t$fs_type_home\tdefaults,noatime\t0\t2" >> /target/etc/fstab
    check_exit
fi

if [[ -n $boot_dev ]] ; then
	if [[ $use_uuid = yes ]]; then
		boot_part="$(blkid -s UUID $boot_dev | awk '{ print $2 }' | sed 's/\"//g')"
	else
		boot_part="$boot_dev"
	fi
    echo -e "\n Adding /boot entry to fstab...\n"
    echo -e "$boot_part\t/boot\t$fs_type_boot\tdefaults,noatime,\t0\t1" >> /target/etc/fstab
    check_exit
fi

if [[ $encrypt_os = yes ]] ; then
    echo -e "\n Adding $install_part entry to crypttab...\n"
    echo -e "root_fs\t\t$install_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

if [[ $encrypt_home = yes ]] ; then
    echo -e "\n Adding $home_part entry to crypttab...\n"
    echo -e "home_fs\t\t$home_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

echo -e "\n Mounting tmpfs and proc...\n"
mount -t tmpfs --bind /dev/ /target/dev/ ; check_exit 
mount -t proc --bind /proc/ /target/proc/ ; check_exit 
mount -t sysfs --bind /sys/ /target/sys/ ; check_exit 

if type -p freshclam ; then
	if [[ $enable_freshclam = "yes" ]] ; then
		if ! [[ -h /target/etc/rc2.d/S02clamav-freshclam ]] ; then
			chroot /target update-rc.d clamav-freshclam defaults
		fi
	fi
fi

if [[ -f /etc/ssh/sshd_config ]] ; then
	if [[ $root_ssh = "no" ]] ; then
		sed -i~ 's/PermitRootLogin yes/PermitRootLogin no/' /target/etc/ssh/sshd_config
	fi
fi

echo -e "\n Installing the boot loader...\n"

if [[ -n $boot_dev ]] ; then
    chroot /target mount $boot_dev /boot
fi

grubversion=$(dpkg -l | egrep "ii|hi" | grep -v bin | grep -v doc | awk '$2 ~ "grub-[glp]" { print $2}')

if [[ -n $grub_partition ]] ; then
	if [[ $grubversion != "grub-pc" ]] ; then


		GRUBDEVICENUM=$(echo $grub_partition |sed 's:/dev/sd::' |sed 's:[0-9]::'g |tr '[a-j]' '[0-9]')

		INSTALLPARTNUM=$(echo $grub_partition |sed 's:/dev/sd::'|sed 's:[a-z]::')

		GRUBPARTNUM=$(expr $INSTALLPARTNUM - 1)

		GRUBROOT="(hd$GRUBDEVICENUM,$GRUBPARTNUM)"

		chroot /target /bin/bash grub-install $grub_partition
		grub --batch <<EOF
		root $GRUBROOT
		setup $GRUBROOT
		quit
EOF

	else
		chroot /target /bin/bash grub-install --recheck --no-floppy --force $grub_partition >> "$error_log" ; check_exit
	fi
elif [[ -n $grub_dev ]]; then
    echo -e "\n Installing the boot loader...\n"
    chroot /target grub-install $grub_dev >> "$error_log"; check_exit
fi

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]] ; then
    chroot /target /usr/sbin/update-initramfs.orig.initramfs-tools -u
fi

if [[ -n $grub_dev ]]; then
    chroot /target update-grub ; check_exit 
fi

while true; do
	echo -n "
 Change root password?
 (yes or no)
 
 Note: If your system has no root user, and you want 
 to keep it that way, say No.
"
	read ans
	case $ans in
	  [Yy]*)
        if [[ $? = 0 ]]; then
            exec 2>&1
            echo "Change root passowrd"
            chroot /target passwd
            exec 2>>"$error_log"
        fi 
	    break ;;
	  [Nn]*) break ;;
	esac
done

if [[ $run_postinstall = "yes" ]] ; then
	for file in /usr/lib/refractainstaller/post-install/* ; do
		if [[ -x "$file" ]] ; then
			bash "$file"
		fi
	done
fi

cp "$error_log" /target/var/log/
cleanup

echo "
    Done! You may now reboot into the new system.
    If you want to change the user name, then run
    change-username after reboot.
    "
exit 0
