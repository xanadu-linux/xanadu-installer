#!/bin/bash
# Made by Sinfallas <sinfallas@yahoo.com>
# Licence: GPL-2
# Based on refractainstaller-8.0.3 by Dean Linkous
LC_ALL=C
if [[ $USER != root ]]; then
	exit 1
fi
error_log="/var/log/installer_error.log"
miicono="--window-icon=/usr/share/icons/install-icon.png"
rsync_excludes="/tmp/installer_exclude.list"
home_boot_excludes="/tmp/home_boot_exclude.list"
parti="/tmp/particionador"
swapfile_blocksize="1024"
swapfile_count="262144"
pmount_fixed="no"
fs_type_boot="ext4"
errores='yad --skip-taskbar --fixed --center --title="Error" --window-icon=error --text-align=fill --borders=6'
progreso='yad --fixed --progress --pulsate --auto-close --skip-taskbar --center'
grubversion=$(dpkg -l | grep -v bin | grep -v doc | awk '$2 ~ "grub-[pc]" {print $2}' | grep -v amd64 | grep -v i386 | grep -v common)
memoria=$(grep "MemTotal" /proc/meminfo | awk '{print $2}')
cpu=$(lscpu | grep "MHz" | awk '{print $3}')
rm -f "$parti"
exec 2>"$error_log"

function advert () {
	yad --skip-taskbar --button="Aceptar":0 --button="Salir":1 --fixed --center --text-align=fill --borders=6 --title="ADVERTENCIA" --text="Esta opción eliminara toda la informacion del disco y no podra revertirse."
	if [[ $? != 0 ]]; then
		source xanaduinstaller-yad
	fi
}

function dialogopart () {
	dispositivo=$(fdisk -l | grep "Disco" | awk '{print $2}' | sed 's/.$//g' | yad --center --no-click --list --title="Disco a particionar" --text="Seleccione el disco que desea particionar." --separator="" --column 'Dispositivo' --height 380 --width 150 --button="Aceptar":0)
	if [[ -z "$dispositivo" ]]; then
		$errores --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe escoger un disco."
		if [[ $? = 0 ]]; then
			source xanaduinstaller-yad
		else
			exit 1
		fi
	fi
	for i in $(fdisk -l "$dispositivo" | grep "swap" | awk '{print $1}'); do
		swapoff $i
	done	
	for i in $(fdisk -l "$dispositivo" | grep "/dev" | grep -v "Disco" | awk '{print $1}'); do
		umount -f $i
	done
	lvremove -f $(pvdisplay $(echo $dispositivo"*") | grep "VG" | awk '{print $3}' | uniq)
	dd if=/dev/zero of="$dispositivo" bs=1024k count=1
	partprobe "$dispositivo"
	if [[ $(arch) = x86_64 ]]; then
		if [[ -f /sys/firmware/efi/runtime ]]; then
			parted -s "$dispositivo" -- mklabel gpt
			parted -a optimal -s "$dispositivo" -- mkpart primary fat32 3 260
			parted "$dispositivo" set 1 esp on
			mkfs.vfat -n BOOT -F 32 $(fdisk -l "$dispositivo" | grep "EFI" | awk '{print $1}')
			touch /tmp/efi
		else
			parted -s "$dispositivo" -- mklabel gpt
			parted -a optimal -s "$dispositivo" -- mkpart non-fs 2 3
			parted "$dispositivo" set 1 bios_grub on
			parted -a optimal -s "$dispositivo" -- mkpart primary ext4 3 260
			parted "$dispositivo" set 2 boot on
			mkfs.ext4 -L boot -F $(fdisk -l "$dispositivo" | grep "EFI" | awk '{print $1}')
		fi
	else
		parted -s "$dispositivo" -- mklabel msdos
		parted -a optimal -s "$dispositivo" -- mkpart primary ext4 3 260
		parted "$dispositivo" set 1 boot on
		mkfs.ext4 -L boot -F $(fdisk -l "$dispositivo" | grep "Linux" | awk '{print $1}')
	fi
	parted -a optimal -s "$dispositivo" -- mkpart primary linux-swap 260 1330
	mkswap -L swap -f $(fdisk -l "$dispositivo" | grep "swap" | awk '{print $1}')
}

function milvm2 () {
	parted -a optimal -s "$dispositivo" -- mkpart extended 1330 100%
	parted -a optimal -s "$dispositivo" -- mkpart logic ext2 1331 100%
	logica=$(parted -s "$dispositivo" -l | grep "1331" | awk '{print $1}')
	pvcreate -ffy $(echo $dispositivo"$logica")
	vgcreate -fy xanadu $(echo $dispositivo"$logica")
	lvcreate -l 100%FREE -n root xanadu
	partprobe "$dispositivo"
	mkfs.ext4 -F /dev/mapper/xanadu-root
	touch "$parti"
}

function milvm3 () {
	parted -a optimal -s "$dispositivo" -- mkpart non-fs 1331 100%
	parted "$dispositivo" set 4 lvm on
	casilvm=$(fdisk -l "$dispositivo" | grep "LVM" | awk '{print $1}')
	pvcreate -ffy "$casilvm"
	vgcreate -fy xanadu "$casilvm"
	lvcreate -l 100%FREE -n root xanadu
	partprobe "$dispositivo"
	mkfs.ext4 -F /dev/mapper/xanadu-root
	touch "$parti"
}

function milvm () {
	advert
	if yad --skip-taskbar --fixed --center --text-align=fill --borders=6 --title="ADVERTENCIA" --text="Se recomienda utilizar un sistema de energia de respaldo para utilizar LVM"; then	
	dialogopart
		if [[ $(parted -s "$dispositivo" -- print | grep "Partition" | awk '{print $3}') = msdos ]]; then
			milvm2 | $progreso --progress-text="Creando particiones, por favor espere..." --title="Particionando"
		else
			milvm3 | $progreso --progress-text="Creando particiones, por favor espere..." --title="Particionando"
		fi
	else
		source xanaduinstaller-yad
	fi
}

function miparticion2 () {
	parted -a optimal -s "$dispositivo" -- mkpart primary ext4 1331 100%
	partprobe "$dispositivo"
	mkfs.ext4 -L root -F $(fdisk -l "$dispositivo" | grep "Sistema de ficheros de Linux" | awk '{print $1}')
	touch "$parti"
}

function miparticion () {
	advert
	dialogopart
	miparticion2 | $progreso --progress-text="Creando particiones, por favor espere..." --title="Particionando"
}

function finalizando_1 () {
	rmdir /live-build/
	rm -f /target/etc/apt/preferences.d/exclude.pref
	rm -f /target/etc/apt/preferences		
	rm -f /target/etc/inittab
	rm -rf /target/tmp/*
	rm -rf /target/var/tmp/*
	rm -rf /target/var/cache/polipo/*
	rm -rf /target/root/.local/share/Trash/*
	rm -rf /target/home/*/.local/share/Trash/*
	rm -rf /target/home/*/.mozilla/firefox/*/*Cache*
	find /target/var/log/ -type f -exec rm -f {} \;
	if ! [[ -z $(fdisk -l | grep "swap" | awk '{print $1}') ]]; then
		rm -f /target/swapfile
		sed -i 's_/swapfile_#/swapfile_g' /target/etc/fstab
	fi
	sed -i 's_autologin-user=user_#autologin-user=user_g' /target/etc/lightdm/lightdm.conf
	sed -i 's_autologin-user-timeout=0_#autologin-user-timeout=0_g' /target/etc/lightdm/lightdm.conf
	sed -i 's_#greeter-hide-users=false_greeter-hide-users=false_g' /target/etc/lightdm/lightdm.conf
	sed -i 's_#session-cleanup-script=_session-cleanup-script=/usr/bin/fin_g' /target/etc/lightdm/lightdm.conf
	sed -i 's_show-indicators=~language;~session;~power_show-indicators=~session;~power_g' /target/etc/lightdm/lightdm-gtk-greeter.conf
	sed -i 's_#show-clock=_show-clock=true_g' /target/etc/lightdm/lightdm-gtk-greeter.conf
	sed -i 's_#clock-format=_clock-format=%a, %d %b %I:%M_g' /target/etc/lightdm/lightdm-gtk-greeter.conf
	sed -i 's_umask 022_umask 027_g' /target/etc/init.d/rc
	sed -i 's_UMASK		022_UMASK	027_g' /target/etc/login.defs
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT="acpi_osi=Linux swapaccount=1 cgroup_enable=memory security=apparmor apparmor=1 panic=10 quiet"/g' /target/etc/default/grub
	sed -i 's_/bin/bash_/usr/bin/fish_g' /target/etc/passwd
	echo "default-user-image=/usr/share/images/desktop-base/logo1.png" >> /target/etc/lightdm/lightdm-gtk-greeter.conf
	echo "user ALL=(ALL) ALL" > /target/etc/sudoers.d/live
	echo "umask 027" >> /target/etc/profile
	echo "auth required pam_succeed_if.so user != root quiet" >> /target/etc/pam.d/lightdm
	echo "proc /proc proc defaults,hidepid=2 0 0" >> /target/etc/fstab
	echo "tmpfs /run tmpfs rw,nosuid,async,noexec,nodev,noatime,mode=755 0 0" >> /target/etc/fstab
	echo "tmpfs /tmp tmpfs noatime,async,nosuid,noexec,nodev,rw 0 0" >> /target/etc/fstab
	echo 'DPkg::Post-Invoke {"echo Ejecutando prelink, espere...;/etc/cron.daily/prelink";}' > /target/etc/apt/apt.conf
	if [[ $(cat /target/etc/hostname) = xanadu ]]; then
		echo xanadu-$(date | md5sum | cut -c 1-10) > /target/etc/hostname
		sed -i 's_xanadu_'$(cat /target/etc/hostname)'_g' /target/etc/hosts
	fi
	if [[ -n "$(lspci | grep -E 'VGA|Display' | head -n1 | cut -d ':' -f3 | grep -F 'Intel')" ]]; then
		echo 'Section "Device"' > /target/etc/X11/xorg.conf
		echo ' Identifier "intel"' >> /target/etc/X11/xorg.conf
		echo ' Driver "intel"' >> /target/etc/X11/xorg.conf
		echo ' BusID  "PCI:0:2:0"' >> /target/etc/X11/xorg.conf
		echo ' Option "AccelMethod" "SNA"' >> /target/etc/X11/xorg.conf
		echo ' Option "SwapbuffersWait" "false"' >> /target/etc/X11/xorg.conf
		echo ' Option "Tiling" "true"' >> /target/etc/X11/xorg.conf
		echo ' Option "BackingStore" "True"' >> /target/etc/X11/xorg.conf
		echo ' Option "XvMC" "on"' >> /target/etc/X11/xorg.conf
		echo ' Option "TripleBuffer" "true"' >> /target/etc/X11/xorg.conf
		echo ' Option "DRI" "true"' >> /target/etc/X11/xorg.conf
		echo 'EndSection' >> /target/etc/X11/xorg.conf
	fi
	chmod 600 /target/etc/sudoers
	chmod 644 /target/usr/bin/lxpolkit
	chmod -R g=-r-x,o=-r-x /home/user/
	chroot /target groupadd -r fuse
	chroot /target update-grub2
	chroot /target systemctl enable systemd-readahead-collect 
	chroot /target systemctl enable systemd-readahead-replay
	chroot /target systemctl enable swapspace
	chroot /target systemctl disable clamav-freshclam
	chroot /target systemctl disable i2p
	chroot /target systemctl disable memlockd
	chroot /target systemctl disable polipo
	chroot /target systemctl disable privoxy
	chroot /target systemctl disable ssh
	chroot /target systemctl disable tor
	chroot /target iucode_tool --scan-system
	chroot /target update-initramfs -u
	chroot /target chage -M 365 root
	chroot /target yes "" | sensors-detect
	chroot /target apt -y remove xanadu-installer sysvinit xanadu-grubdoctor
	if (( $memoria > 4096000 )); then
		echo "tmpfs /var/cache/apt/archives tmpfs noatime,async,nodev 0 0" >> /etc/fstab
		if yad --skip-taskbar --fixed --center --text-align=fill --borders=6 --title="Finalizando" --text="¿Desea activar fail2ban y psad?"; then
			chroot /target systemctl enable ntp
			chroot /target systemctl enable fail2ban
			chroot /target systemctl enable psad
		else
			chroot /target systemctl disable ntp
			chroot /target systemctl disable fail2ban
			chroot /target systemctl disable psad
		fi
	fi
}

function loctimezone () {
	echo -e "\n\tConfigure la zona horaria.\n"
	sleep 2
	dpkg-reconfigure tzdata
	#dpkg-reconfigure locales
	#dpkg-reconfigure keyboard-configuration
}

function cleanup () {
echo -e "\n @@@ Limpiando...\n" >> "$error_log"
if $(df | grep -q /target/proc/); then
	umount /target/proc/
fi

if $(df | grep -q /target/dev/); then
	umount /target/dev/
fi

if $(df | grep -q /target/sys/); then
	umount /target/sys/
fi

if $(df | grep -q $boot_dev); then
	umount -l $boot_dev
fi

if $(df | grep -q /target_boot); then
	umount -l /target_boot/
fi

if $(df | grep -q /target_home); then
	umount -l /target_home/
fi

if $(df | grep -q $home_dev); then
	umount $home_dev
fi

if $(df | grep -q "\/dev\/mapper\/home_fs"); then
	umount /dev/mapper/home_fs
fi

if [[ -h /dev/mapper/home_fs ]]; then
	cryptsetup luksClose home_fs
fi

if $(df | grep -q /target); then
	umount -l /target/
fi

if $(df | grep -q $install_dev); then
	umount $install_dev
fi    

if $(df | grep "\/dev\/mapper\/root_fs"); then
	umount /dev/mapper/root_fs
fi

if [[ -h /dev/mapper/root_fs ]]; then
	cryptsetup luksClose /dev/mapper/root_fs
fi

if [[ -d /target ]]; then
	rm -rf /target
fi

if [[ -d /target_home ]]; then
	rm -rf /target_home
fi

if [[ -d /target_boot ]]; then
	rm -rf /target_boot
fi
}

function check_exit () {
	if [[ $? != 0 ]]; then
		$errores --button="Continuar":0 --button="Salir ahora":1 --text="Error detectado: $?  $error_message
\Vea $error_log para detalles. \n\nEsto puede no ser fatal.. Presione \"Continuar\" para proceder"
		if [[ $? != 0 ]]; then
			cleanup
			exit 1
		fi
	fi
}

function preinstall () {
	yad $miicono --image=gtk-dialog-info --center --title="Particionamiento" --text-align=fill --borders=6 --button="Particiones Convencionales":0 --button="Utilizar LVM":1 --button="Regresar":2 --button="Salir":3 --text="Seleccione el tipo de particiones que desea utilizar."
	ans="$?"
	case $ans in
		0) miparticion ; check_exit ;;
		1) milvm ; check_exit ;;
		2) source xanaduinstaller-yad ;;
		3) exit 0 ;;
	esac
}

function choose_boot () {
	boot_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" | sort | awk '{print "\n" $0 }' | yad $miicono --center --list --title="particion /boot" --text="Seleccione una particion para /boot." --separator="" --column ' ' --column 'Particiones' --height=400 --width=150 --button="Aceptar":0)
}

function fix_hostname () {
	new_hostname=$(yad $miicono --center --text-align=fill --borders=6 --entry --title="Cambio de hostname" --text="Hostname erroneo. Intente de nuevo." --entry-text="$HOSTNAME" --width=500 --button="Aceptar":0)
	test_hostname	
}

function test_hostname () {
	if [[ $new_hostname =~ [_]|[@]|[~]|[\!]|[\#]|[=]|[+]|[\&]|[\^]|[\$]|[%]|[\(]|[\)]|[\*]|[\:]|[\;]|[\"]|[\']|[\`]|[,]|[.]|[\<]|[\>]|[\?]|[\{]|[\}]|[\[]|[\]]|[/]|[\|]|[\ ] ]]; then
 		fix_hostname
	elif [[ $new_hostname = -* ]] || [[ $new_hostname = *- ]]; then
		fix_hostname
	elif [[ -z $new_hostname ]]; then
		new_hostname="$HOSTNAME"
	fi
}

function select_hostname () {
	new_hostname=$(yad $miicono --center --entry --title="Cambio de hostname" --text="Ingrese el nuevo hostname para el sistema." --entry-text="$HOSTNAME" --width=500 --button="Aceptar":0)
	#test_hostname
}

cat > "$rsync_excludes" <<EOF

- /dev/*
- /cdrom/*
- /media/*
- /target
- /swapfile
- /mnt/*
- /sys/*
- /proc/*
- /tmp/*
- /live
- /live-build
- /boot/grub/grub.cfg
- /boot/grub/menu.lst
- /boot/grub/device.map
- /etc/udev/rules.d/70-persistent-cd.rules
- /etc/udev/rules.d/70-persistent-net.rules
- /etc/fstab
- /etc/mtab
- /home/snapshot/
- /home/*/.gvfs
- /home/*/.cache/*
- /lib/live/overlay
- /lib/live/image
- /lib/live/rootfs
- /lib/live/mount
- /run/*
- /var/log/*
- /var/tmp/*
- /var/spool/*
- /etc/apt/preferences.d/exclude.pref
- /etc/apt/preferences
- /var/cache/polipo/*
- /var/cache/samba/*
- /root/.local/share/Trash/*
- /home/*/.local/share/Trash/*
- /home/*/.mozilla/firefox/*/*Cache*
- /lib/live/overlay
- /lib/live/image
- /lib/live/rootfs
- /lib/live/mount
- /run/*

EOF
chmod 666 "$rsync_excludes"

cat > "$home_boot_excludes" <<EOF

- *.gvfs
- *.Xauthority
- *.ICEauthority
- *.xsession-errors*

EOF
chmod 666 "$home_boot_excludes"

[[ $DISPLAY ]] || { echo "No hay un servidor X corriendo. Saliendo..." ; exit 1 ; }

if ! [[ -d /lib/live/mount/rootfs ]]; then
	live_session_warning="ALERTA: No se esta ejecutando desde un Live-CD/USB o esta usando una configuracion no soportada"
fi

yad $miicono --center --text-align=fill --borders=6 --title="Instalar Xanadu GNU/Linux" --button="Instalacion simple":0 --button="Instalacion experta":1 --button="Salir":2 --text="$live_session_warning

 Esta aplicacion instalara Xanadu GNU/Linux en su disco duro.

 Cantidad de RAM minima:	512000 kB.
 Cantidad de RAM recomendada:	1073740 kB.
 Cantidad de RAM detectada:	$memoria kB.

 Velocidad del CPU minima:	1000.000 MHz.
 Velocidad del CPU recomendada:	1500.000 MHz.
 Velocidad del CPU detectada:	$cpu MHz.
"
mode="$?"
case $mode in
	0) install="simple" ;;
	1) install="expert" ;;
	2) exit 0 ;;
esac

if [[ $install = "expert" ]]; then
	opts=$(yad $miicono --center --list --title="Opciones de instalacion" --text="Marque las opciones que usted quiere para la instalacion.
Si usted no entiende una opcion, probablemente no la necesite." --checklist --column "Marque" --column "Num" --column "Opcion" --width=590 --height=525 --button="Aceptar":0 --button="Salir":1\
  FALSE 01 "Cambiar nombre de usuario" \
  FALSE 02 "Crear una particion /home separada" \
  TRUE 03 "Crear una particion /boot separada" \
  FALSE 04 "Cifra la raiz del sistema de archivos (requiere /boot separada)" \
  FALSE 05 "Cifra la particion /home (requiere /home separada)" \
  FALSE 06 "Escribe data aleatoria a las particiones cifradas (mas seguro)" \
  FALSE 07 "Escribe ceros a todas las particiones (para borrar la data previa)" \
  FALSE 08 "No instala el bootloader" \
  FALSE	09 "No formatea el sistema de archivos" \
  FALSE 10 "Usar UUID en /etc/fstab" \
  FALSE 11 "Usar etiquetas del sistema de archivos en /etc/fstab" \
  FALSE 12 "Cambiar hostname")
fi

if [[ $? = 1 ]]; then
	exit 0
fi

if $(echo $opts | grep -q 01); then 
	change_user="yes"
fi

if $(echo $opts | grep -q 02); then
	sep_home="yes"
fi

if $(echo $opts | grep -q 03); then
	sep_boot="yes"
fi

if $(echo $opts | grep -q 04); then
	encrypt_os="yes"
fi

if $(echo $opts | grep -q 05); then
	encrypt_home="yes"
fi

if $(echo $opts | grep -q 06); then
	write_random="yes"
fi

if $(echo $opts | grep -q 07); then
	write_zero="yes"               
fi

if $(echo $opts | grep -q 08); then
	bootloader="no"
else
	bootloader="yes"
fi

if $(echo $opts | grep -q 09); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		no_format=""
	else
		no_format="yes"
	fi
fi

if $(echo $opts | grep -q 10); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		uuid_message="--> UUIDs en fstab no funcionan con sistemas cifrados y
 no seran usados. Edite el fstab manualmente despues de la instalacion."
	else
		use_uuid="yes"
	fi
fi

if $(echo $opts |grep -q 11); then
	if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
		disklabel_message="--> Disk labels en fstab no funcionan con sistemas cifrados y
 no seran usados. Edite el fstab manualmente despues de la instalacion."
	elif [[ $use_uuid = "yes" ]]; then
		disklabel_message="--> Este script no puede hacer ambas UUIDs y disk labels para fstab.
 UUIDs sera usado, y usted puede agregar las etiquetas de disk manualmente, despues de la instalacion."
	else
		use_labels="yes"
	fi
fi

if $(echo $opts | grep -q 12); then
	change_hostname="yes"
fi

if [[ $encrypt_os = "yes" ]] || [[ $encrypt_home = "yes" ]]; then
	if ! [[ -f /sbin/cryptsetup ]]; then
        	$errores --button="Proceder sin particiones cifradas":0 --button="Salir":1 --text="Usted necesitas instalar cryptsetup y ejecutar 'sudo modprobe dm-mod' antes de usar el cifrado."
		if [[ $? = 0 ]]; then
			encrypt_os="no"
			encrypt_home="no"
		else
			exit 1
		fi
	fi
fi    

if [[ $install = "expert" ]]; then
	yad $miicono --center --title="Particionamiento" --text-align=fill --borders=6 --button="Ejecutar GParted":0 --button="Ejecutar Cfdisk":1 --button="Saltar este paso":2 --button="Salir":3 --text="Seleccione el metodo que utilizara para crear las particiones. Si usted ya tiene las particiones, puede saltar este paso.

  Ejecutar particionador ahora?"
	ans="$?"
	case $ans in
		0) gparted ; check_exit ;;
		1) xterm -fa monaco -fs 12 -geometry 90x20+0+0 -hold -e cfdisk ;;
		2)  ;;
		3) exit 0 ;;
	esac
else
	preinstall
fi

swapon -p 25 -f $(fdisk -l | grep "swap" | awk '{print $1}')

if [[ $sep_boot = "no" ]]; then
	if [[ $encrypt_os = "yes" ]]; then
		$errores --button="Proceder sin particiones cifradas":0 --button="Salir":1 --text="Usted debe tener una particion /boot sin cifrar si usted quiere bootear un sistema operativo cifrado. Puede proceder sin cifrar la raiz del sistema o puede salir y comenzar de nuevo."
		if [[ $? = 0 ]]; then
			encrypt_os="no"
		else
			exit 1
		fi
	fi
fi

choose_grub () {
	yad $miicono --center --text-align=fill --borders=6 --title="Instalacion de GRUB" --text="Seleccione la ubicacion para instalar GRUB. La opcion comun es colocarlo en el MBR del primer disco (/dev/sda).  

		Seleccione MBR para instalar al MBR de cualquier disco.
		Seleccione Particion para instalar a una particion.
		Seleccione No Bootloader para proceder sin un bootloader. 
		Seleccione Exit para salir de este programa.
		" --button="MBR":0 --button="Partition":1 --button="Sin Bootloader":2 --button="Salir":3
	answer="$?"
	if [[ $answer = 0 ]]; then
		grub_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z]" | sort | awk '{print "\n" $0 }' | yad $miicono --center --list --separator="" --title="Bootloader" --text="Selecione la ubicacion para instalar el bootloader.
" --column ' ' --column 'Disco Duro' --height=200)
		if [[ -z $grub_dev ]]; then
			$errores --button="Si, Estoy seguro.":0 --button="Ir atras":1 --text="Ningun bootloader sera instalado. Esta seguro de continuar?"
			if [[ $? = 1 ]]; then
				choose_grub
			fi
		elif ! [[ -b $grub_dev ]]; then
			$errores --button="Salir":0 --button="Ir atras":1 --text="Algo esta mal.  $grub_dev no es un dispositivo de bloques."
			if [[ $? = 0 ]]; then
				exit 1
			else
				choose_grub
			fi
		fi
	elif [[ $answer = 1 ]]; then
		grub_partition=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" | sort | awk '{print "\n" $0 }' | yad $miicono --center --list --title="Bootloader" --text="Seleccione una particion para el bootloader (GRUB)." --separator="" --column ' ' --column 'Particiones' --height=380 --width=150)
		if [[ -z $grub_partition ]]; then
			$errores --button="Si, Estoy seguro.":0 --button="Ir atras":1 --text="Ningun bootloader sera instalado. Esta seguro de continuar?"
			if [[ $? = 1 ]]; then
				choose_grub
			fi
		elif ! [[ -b $grub_partition ]]; then
			$errores --button="Salir":0 --button="Ir atras":1 --text="Algo esta mal.  $grub_partition no es un dispositivo de bloques."
			if [[ $? = 0 ]]; then
				exit 1
			else
				choose_grub
			fi
		fi
	elif [[ $answer = 2 ]]; then
		yad $miicono --center --text-align=fill --borders=6 --title="Bootloader" --text="  Procediendo sin un bootloader. 
  Necesitara de un procedimiento especial para bootear su sistema. Be sure that you know what you're doing." --button="Proceder":0 --button="Salir":1
		if [[ $? = 1 ]]; then
			exit 0
		fi
	elif [[ $answer = 3 ]]; then
		exit 0
	fi
}

if [[ $install = "expert" ]]; then
	if [[ $bootloader = "yes" ]]; then
		choose_grub
	fi
fi

if ! [[ -f "$parti" ]]; then
	blkid -c /dev/null | awk '{print $1 $2}' | yad $miicono --timeout 20 --text-info --title="Lista de particiones" --text="Lista de particiones (para referencia) Usted puede necesitar esto mas adelante." --width 820 --height 400 --button="Cerrar":0
fi

if [[ -f "$parti" ]]; then
	boot_dev=$(blkid -c /dev/null | grep "boot" | awk '{print $1}' | sed 's/.$//g')
else
	if [[ $sep_boot = "yes" ]]; then
		choose_boot
	fi
fi

choose_root () {
	install_dev1=$(find /dev -mindepth 1 -maxdepth 1 -name "*[sh]d[a-z][1-9]*" | sort)
	install_dev2=$(find /dev/mapper -mindepth 1 -maxdepth 1 | grep -v control)
	install_dev3="$install_dev1 $(echo -e '\n'$install_dev2)"
	install_dev4=$(echo "$install_dev3" | yad --center --no-click --list --title="Particion raiz" --text="Seleccione una particion para instalar el sistema operativo." --column 'Particiones' --height 380 --width 150 --button="Aceptar":0)
	install_dev=$(echo $install_dev4 | sed 's/.$//g')
	if [[ -z $install_dev ]]; then
		$errores --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe escoger una particion para la instalacion. Que quiere hacer?"
		if [[ $? = 0 ]]; then
			choose_root
		else
			exit 1
		fi
#elif ! [[ -b $install_dev ]]; then
#    $errores --button="Ir atras":0 --button="Salir":1 --text="    Algo esta mal. Tal vez usted marco mas de una casilla. Usted dijo que quiere instalar el sistema en: $install_dev"
#        if [[ $? = 0 ]]; then
#            choose_root
#        else
#            exit 1
#        fi
	elif [[ $install_dev = $boot_dev ]]; then
		$errores --text="Selecciono la misma particion para la raiz y para /boot. Intente de nuevo." --button="Aceptar":0
		choose_root
	fi
}

if [[ -f "$parti" ]]; then
	install_dev=$(blkid -c /dev/null | grep "root" | awk '{print $1}' | sed 's/.$//g')
else
	choose_root
fi

migrub=$(echo $boot_dev | sed 's/.$//g')
if [[ $install = "simple" ]]; then
	grub_dev=$(echo $migrub)
fi

choose_fs_os () {
	fs_type_os=$(yad --center --list --title="Sistema de archivos para la raiz" --text="Que sistema de archivos le gustaria para $install_dev?" \
  --separator="" --column "Formato" --height=200 --button="Aceptar":0 \
  "xfs" \
  "btrfs" \
  "ext4")
	if [[ -z $fs_type_os ]]; then
		$errores --button="Ir atras":0 --button="Salir":1 --text="Debe escoger un sistema de archivos para
el sistema operativo"
		if [[ $? = 0 ]]; then
			choose_fs_os
		else
			exit 1
		fi
	fi  
}

if [[ $install = "expert" ]]; then
	if [[ $no_format = "yes" ]]; then 
		fs_type_os=$(blkid -s TYPE "$install_dev" | awk -F"\"" '{ print $2 }')
	else
		choose_fs_os
	fi
else
	if [[ $grubversion = "grub-pc" ]]; then
		fs_type_os="ext4"
	else
		fs_type_os="ext4"
	fi
fi

choose_home () {
	home_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][1-9]*" | sort | awk '{print "\n" $0 }' | yad $miicono --center --list --title="Particion para /home" --text="Seleccione una particion para /home" --separator="" --column ' ' --column 'Particiones' --height=400 --width=150 --button="Aceptar":0)
	if [[ -n $home_dev ]]; then
		if ! [[ -b $home_dev ]]; then
			$errores --button="Ir atras":0 --button="Salir":1 --text="    Algo esta mal. 
    $home_dev no es un dispositivo de bloques. "
			if [[ $? = 0 ]]; then
				choose_home
			else
				exit 1
			fi
		elif
			[[ $install_dev = $home_dev ]]; then
			$errores --text="Selecciono la misma particion para la raiz y para /home. Si usted no quiere una particion separada para /home, haga clic en ACEPTAR sin seleccionar una." --button="Ir atras":0 --button="Salir":1
			if [[ $? = 0 ]]; then
				choose_home
			else
				exit 1
			fi
		elif
			[[ $boot_dev = $home_dev ]]; then
			$errores --text="Selecciono la misma particion para /home y para /boot. Intente de nuevo." --button="Ir atras":0 --button="Salir":1
			if [[ $? = 0 ]]; then
				choose_home
			else
				exit 1
			fi
		fi
	fi
}

if [[ $sep_home = "yes" ]]; then
	choose_home
fi

choose_fs_home () {
	if [[ -n $home_dev ]]; then
		fs_type_home=$(yad $miicono --center --list --title="Sistema de archivos para /home" --text="Que sistema de archivos le gustaria para $home_dev?" --separator="" --column "Formato" --height=200 --button="Aceptar":0 \
  "xfs" \
  "btrfs" \
  "ext4")
	fi
	if [[ -z $fs_type_home ]]; then
		$errores --button="Ir atras":0 --button="Salir":1 --text="Debe escoger un sistema de archivos para /home"
		if [[ $? = 0 ]]; then
			choose_fs_home
		else
			exit 1
		fi
	fi
}

if [[ -n $home_dev ]]; then
	if [[ $no_format = "yes" ]]; then 
		fs_type_home=$(blkid -s TYPE "$home_dev" | awk -F"\"" '{ print $2 }')
	else
		choose_fs_home
	fi
fi

if [[ $change_hostname = "yes" ]]; then
	select_hostname
else
	new_hostname="$HOSTNAME"
fi

if [[ $change_user = "yes" ]]; then
	user_message="--> El nombre de usuario se cambiara."
fi

if [[ -n $grub_dev ]]; then
	grub_dev_message="--> El bootloader se instalara en $grub_dev"
elif [[ -n $grub_partition ]]; then
	grub_dev_message="--> El bootloader se instalara en $grub_partition"
else
	grub_dev_message="--> El bootloader no sera instalado."
fi

if [[ $encrypt_os = yes ]]; then
	os_enc_message=", y sera cifrado."
fi

if [[ -z $home_dev ]]; then
	home_dev_message="--> /home no estara en una particion separada."
elif
	[[ $no_format = "yes" ]]; then
		home_dev_message="--> /home se instalara en $home_dev"
else
	home_dev_message="--> /home se instalara en $home_dev y formateado como $fs_type_home"
fi

if [[ -n $home_dev ]] && [[ $encrypt_home = yes ]]; then
	home_enc_message=", y sera cifrado."
fi

if [[ -n $boot_dev ]]; then
	if [[ $no_format != "yes" ]]; then
		boot_dev_message="--> /boot se instalara en $boot_dev y formateado como $fs_type_boot."
	else
		boot_dev_message="--> /boot se instalara en $boot_dev"
	fi
fi

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]]; then
	proceed_message="***  IF YOU PROCEED, YOU WILL NEED TO RESPOND TO SOME QUESTIONS IN THE TERMINAL.   Be prepared to create 
    passphrases for any encrypted partitions (several times each.) When you see the progress bar come up, you can take a break."
fi

if [[ $no_format = "yes" ]]; then
	install_dev_message="--> El sistema operativo se instalara en $install_dev, y lo formateara (o lo hizo) manualmente."
else
	install_dev_message="--> El sistema operativo se instalara en $install_dev y formateado como $fs_type_os$os_enc_message"
fi

yad $miicono --center --text-align=fill --borders=6 --info --title="Sumario" --button="Proceder con la instalacion.":0 --button="Salir":1 --text="Por favor CIERRE cualquier otra aplicacion en ejecucion.

Aqui hay un sumario de lo que se hara. ESTA ES SU ULTIMA OPORTUNIDAD PARA SALIR antes de proceder con la instalacion.

$grub_dev_message
$install_dev_message$os_enc_message
$home_dev_message$home_enc_message
$boot_dev_message
$user_message
$desktop_message
$console_message
$uuid_message
$disklabel_message
$uuid_message
Hostname: $new_hostname

$proceed_message"
if [[ $? != 0 ]]; then
	exit 0
fi

cleanup

if [[ $write_random = "yes" ]]; then
	if [[ $encrypt_os = "yes" ]]; then
       		exec 2>&1
		dd if=/dev/urandom of="$install_dev"
		exec 2>>"$error_log"
	fi  
fi

if [[ $write_random = "yes" ]]; then
	if [[ $encrypt_home = "yes" ]]; then
		exec 2>&1
		dd if=/dev/urandom of="$home_dev"
		exec 2>>"$error_log"
	fi  
fi

if [[ $write_zero = "yes" ]]; then
	dd if=/dev/zero of="$install_dev"
	if [[ $sep_home = "yes" ]]; then
		exec 2>&1
		dd if=/dev/zero of="$home_dev"
		exec 2>>"$error_log"
	fi
	if [[ $sep_boot = "yes" ]]; then
		exec 2>&1
		dd if=/dev/zero of="$boot_dev"
		exec 2>>"$error_log"
	fi
fi

mkdir /target ;  check_exit

if [[ $encrypt_os = yes ]]; then
	cryptsetup luksFormat "$install_dev" ; check_exit
	cryptsetup luksOpen "$install_dev" root_fs ; check_exit
	install_part="/dev/mapper/root_fs"
else
	install_part="$install_dev"
fi 

if [[ $no_format != "yes" ]]; then
	if [[ -f "$parti" ]]; then
		echo "1" > /dev/null
	else
		if [[ $fs_type_os = ext4 ]]; then
			mkfs.$fs_type_os -F "$install_part" ; check_exit
			tune2fs -r 10000 "$install_part" ; check_exit
		else
			mkfs.$fs_type_os -f "$install_part" ; check_exit
		fi
	fi
fi

mount "$install_part" /target ; check_exit 

if [[ -n $home_dev ]]; then
	mkdir /target_home ; check_exit
	if [[ $encrypt_home = yes ]]; then
		cryptsetup luksFormat "$home_dev"
		check_exit
		cryptsetup luksOpen "$home_dev" home_fs
		check_exit
		home_part="/dev/mapper/home_fs"
	else
		home_part=$home_dev
	fi
	if [[ $no_format != "yes" ]]; then
		if [[ $fs_type_os = ext4 ]]; then
			mkfs.$fs_type_home -F "$home_part" ; check_exit
			tune2fs -r 10000 "$home_part" ; check_exit
		else
			mkfs.$fs_type_home -f "$home_part" ; check_exit
		fi
	fi
	mount "$home_part" /target_home ; check_exit
	sep_home_opt="--exclude=/home/*"
fi

if [[ -n $boot_dev ]]; then
	mkdir /target_boot ; check_exit
	if [[ $no_format != "yes" ]]; then
		if [[ -f /sys/firmware/efi/runtime ]]; then
			echo "1" > /dev/null
		else
			if [[ $fs_type_os = ext4 ]]; then
				mkfs.$fs_type_boot -F $boot_dev ; check_exit
			else
				mkfs.$fs_type_boot -f $boot_dev ; check_exit
			fi
		fi
	fi
	mount $boot_dev /target_boot
	sep_boot_opt="--exclude=/boot/*"
fi

rsync -av / /target/ --exclude-from="$rsync_excludes" ${sep_home_opt} ${sep_boot_opt} | tee >(yad $miicono --center --width=400 --fixed --progress --pulsate --auto-close --skip-taskbar --center --title="INSTALANDO" --progress-text="Copiando el sistema a la nueva particion, por favor espere.")

if ! [[ -z $home_dev ]]; then
	rsync -av /home/ /target_home/ --exclude-from="$home_boot_excludes" | tee >(yad $miicono --auto-close --progress --pulsate --width=350 --title="Copiando carpeta home a la nueva particion.")
fi

if [[ -n $boot_dev ]]; then
	rsync -av /boot/ /target_boot/ --exclude-from="$home_boot_excludes" | tee >(yad $miicono --auto-close --progress --pulsate --width=350 --title="Copiando archivos a la particion boot.")
fi

dd if=/dev/zero of=/target/swapfile bs="$swapfile_blocksize" count="$swapfile_count" | \
tee >(yad $miicono --auto-close --progress --pulsate --width=350 --title="Creando un archivo swap...")
mkswap /target/swapfile ; check_exit

if [[ -f /target/usr/sbin/update-initramfs.distrib ]]; then
	cp /target/usr/sbin/update-initramfs.distrib /target/usr/sbin/update-initramfs
fi

if [[ -f /target/usr/sbin/update-initramfs.debian ]]; then
	cp /target/usr/sbin/update-initramfs.debian /target/usr/sbin/update-initramfs
fi

if [[ -f /target/etc/pmount.allow ]]; then
	if [[ $pmount_fixed = "no" ]]; then
		sed -i 's:/dev/sd\[a-z\]:#/dev/sd\[a-z\]:' /target/etc/pmount.allow
	fi
fi

if [[ -e /target/usr/bin/updatedb.mlocate ]]; then
	if ! [[ -x /target/usr/bin/updatedb.mlocate ]]; then
		chmod +x /target/usr/bin/updatedb.mlocate
	fi
fi

if ! [[ $new_hostname = $HOSTNAME ]]; then
	sed -i "s/$HOSTNAME/$new_hostname/" /target/etc/hostname
	sed -i "s/$HOSTNAME/$new_hostname/g" /target/etc/hosts
fi

if [[ $encrypt_os != "yes" ]]; then
	if [[ $use_uuid = yes ]]; then
		install_part="$(blkid -s UUID $install_dev | awk '{ print $2 }' | sed 's/\"//g')"
	elif [[ $use_labels = yes ]]; then
		rootfslabel=$(/sbin/blkid -c /dev/null -s LABEL $install_dev | awk -F"\"" '{ print $2 }')
		if [[ -n $rootfslabel ]]; then
			install_part="LABEL=$rootfslabel"
		else
			rootfslabel=$(yad $miicono --center --entry --title="Etiqueta del Sistema de Archivos" --text="Enter a disk label for $install_dev" --width=300 --button="Aceptar":0)
			if [[ -n $rootfslabel ]]; then
				e2label "$install_dev"  "$rootfslabel"
				install_part="LABEL=$rootfslabel"
			else
				install_part="$install_dev"
			fi
		fi
	else
		install_part="$install_dev"
	fi
fi

if [[ $fs_type_os = ext4 ]]; then
	echo -e "$install_part\t/\t$fs_type_os\tdefaults,noatime,nodelalloc,commit=60,inode_readahead_blks=64,discard,errors=remount-ro\t0\t1" > /target/etc/fstab
else
	echo -e "$install_part\t/\t$fs_type_os\tdefaults\t0\t1" > /target/etc/fstab
fi
check_exit

if ! [[ -z $home_dev ]]; then
	if [[ $encrypt_os != "yes" ]]; then
		if [[ $use_uuid = yes ]]; then
			home_part="$(blkid -s UUID $home_dev | awk '{ print $2 }' | sed 's/\"//g')"
		elif [[ $use_labels = yes ]]; then
				homefslabel=$(/sbin/blkid -c /dev/null -s LABEL $home_dev | awk -F"\"" '{ print $2 }')
				if [[ -n $homefslabel ]]; then
					home_part="LABEL=$homefslabel"
				else
					homefslabel=$(yad $miicono --center --entry --title="Filesystem Label" --text="Enter a disk label for $home_dev" --width=300 --button="Aceptar":0)
					if [[ -n $homefslabel ]]; then
						e2label "$home_dev"  "$homefslabel"
						home_part="LABEL=$homefslabel"
					else
						home_part="$home_dev"
					fi
				fi
		else
			home_part="$home_dev"
		fi
	fi
	if [[ $fs_type_home = ext4 ]]; then
		echo -e "$home_part\t/home\t$fs_type_home\tdefaults,noatime,nodelalloc,commit=60,inode_readahead_blks=64,discard,errors=remount-ro\t0\t3" >> /target/etc/fstab
	else
		echo -e "$home_part\t/home\t$fs_type_home\tdefaults\t0\t3" >> /target/etc/fstab
	fi
	check_exit
fi

if [[ -n $boot_dev ]]; then
	if [[ $use_uuid = yes ]]; then
		boot_part="$(blkid -s UUID $boot_dev | awk '{ print $2 }' | sed 's/\"//g')"
	elif [[ $use_labels = yes ]]; then
			bootfslabel=$(/sbin/blkid -c /dev/null -s LABEL $boot_dev | awk -F"\"" '{ print $2 }')
			if [[ -n $bootfslabel ]]; then
				boot_part="LABEL=$bootfslabel"
			else
				bootfslabel=$(yad $miicono --center --entry --title="Filesystem Label" --text="Enter a disk label for $boot_dev" --width=300 --button="Aceptar":0)
				if [[ -n $bootfslabel ]]; then
					e2label "$boot_dev"  "$bootfslabel"
					boot_part="LABEL=$bootfslabel"
				else
					boot_part="$boot_dev"
				fi
			fi
	else
		boot_part="$boot_dev"
	fi
	if [[ $fs_type_boot = ext4 ]]; then
		echo -e "$boot_part\t/boot\t$fs_type_boot\tdefaults,noatime,errors=remount-ro\t0\t2" >> /target/etc/fstab
	else
		echo -e "$boot_part\t/boot\t$fs_type_boot\tdefaults\t0\t2" >> /target/etc/fstab
	fi
	check_exit
fi

if [[ $encrypt_os = yes ]]; then
	echo -e "root_fs\t\t$install_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

if [[ $encrypt_home = yes ]]; then
	echo -e "home_fs\t\t$home_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

mount -B /dev/ /target/dev/ ; check_exit 
mount -B /proc/ /target/proc/ ; check_exit 
mount -B /sys/ /target/sys/ ; check_exit 

if [[ -n $boot_dev ]]; then
	chroot /target mount $boot_dev /boot
fi

if [[ -n $grub_partition ]]; then
	if [[ $grubversion != "grub-pc" ]]; then
		GRUBDEVICENUM=$(echo $grub_partition |sed 's:/dev/sd::' |sed 's:[0-9]::'g |tr '[a-j]' '[0-9]')
		INSTALLPARTNUM=$(echo $grub_partition |sed 's:/dev/sd::'|sed 's:[a-z]::')
		GRUBPARTNUM=$(expr $INSTALLPARTNUM - 1)
		GRUBROOT="(hd$GRUBDEVICENUM,$GRUBPARTNUM)"
		chroot /target /bin/bash grub-install $grub_partition
		grub --batch <<EOF
		root $GRUBROOT
		setup $GRUBROOT
		quit
EOF

	else
		error_message="grub-install failed."
		chroot /target /bin/bash grub-install --recheck --no-floppy --force $grub_partition >> "$error_log" ; check_exit
	fi
fi

if [[ -n $grub_dev ]]; then
	echo -e "\n Installing the boot loader...\n" >> "$error_log"
	error_message="grub-install failed."
	chroot /target grub-install $grub_dev >> "$error_log" ; check_exit
fi

error_message=""

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]]; then
	chroot /target /usr/sbin/update-initramfs.orig.initramfs-tools -u >> "$error_log"
fi

if [[ -n $grub_dev ]] || [[ -n $grub_partition ]]; then
	chroot /target update-grub ; check_exit 
fi

if [[ $sep_home = "yes" ]]; then
	mount $home_part /target/home
fi

if [[ $change_user = "yes" ]]; then
	oldname=$(awk -F: '/1000:1000/ { print $1 }' /target/etc/passwd)
	newname=$(yad $miicono --center --entry --entry-text="$oldname" --title="Cambio de username" --text="Ingrese el nombre de usuario que quiera usar." --width=300 --button="Aceptar":0)
	chroot /target usermod -l $newname $oldname ; check_exit
	chroot /target groupmod -n $newname $oldname ; check_exit
	chroot /target usermod -d /home/$newname -m $newname ; check_exit

	for i in $(grep -r "/home/$oldname" /target/home/$newname/.config | awk -F":" '{ print $1 }'); do
		sed -i "s/\/home\/$oldname/\/home\/$newname/g" "$i"
	done

	for i in $(grep -r "/home/$oldname" /target/home/$newname/.local | awk -F":" '{ print $1 }'); do
		sed -i "s/\/home\/$oldname/\/home\/$newname/g" "$i"
	done
fi

if [[ $change_user = "yes" ]]; then
	live_user=$(awk -v pattern="$newname" -F: '$1 ~ pattern { print $5 }' /target/etc/passwd)
	real_name=$(yad $miicono --center --entry --title="Cambio de el nombre real" --text="El nombre actual es $live_user.
Ingrese el nombre que quiera usar \(sin comas\)." --width=350 --button="Aceptar":0)
	sed -i~ "s/$live_user/$real_name,,,/" /target/etc/passwd
fi

if [[ $install = "expert" ]]; then
	yad $miicono --center --text-align=fill --borders=6 --title="Edicion de /etc/sudoers" --button="Si":0 --button="No":1 --text="Puede que necesite editar /etc/sudoers para comentar la linea que da a $oldname poder absoluto, o reemplace $oldname con $newname.
Editar /etc/sudoers ahora?" 
	ans="$?"
	if [[ $ans = "0" ]]; then
		edit_sudoers="yes"
		chroot /target visudo
	fi
fi

if [[ $edit_sudoers = "yes" ]]; then
	yad $miicono --center --text-align=fill --borders=6 --title="Desactivar modo sudo para gksu" --button="Si, yo comente la linea.":0 --button="No, Yo reemplace la linea.":1 --text="Si usted comento la linea en /etc/sudoers, uno o mas archivos seran cambiados para que gksu funcione correctamente." 
		ans="$?"
	if [[ $ans = "0" ]]; then
		if [[ -n $newname ]]; then
			sed -i~ '/sudo-mode/s/true/false/' /target/home/"$newname"/.gconf/apps/gksu/%gconf.xml
		else
			sed -i~ '/sudo-mode/s/true/false/' /target/home/user/.gconf/apps/gksu/%gconf.xml
		fi
	fi
fi

if [[ $install = "expert" ]]; then
	yad $miicono --center --text-align=fill --borders=6 --title="Cambiar clave de root" --button="Si":0 --button="No":1 --text="Le gustaria cambiar la clave de root? (Recomendado)"
		ans="$?"
	if [[ $ans = 0 ]]; then
		exec 2>&1
		chroot /target passwd
		exec 2>>"$error_log"
	fi 
fi

if [[ $change_user = "yes" ]]; then
	yad $miicono --center --text-align=fill --borders=6 --title="Cambio de clave de usuario" --button="Si":0 --button="No":1 --text="Le gustaria cambiar la clave del usuario?" 
		ans="$?"
	if [[ $ans = 0 ]]; then
		exec 2>&1
		chroot /target passwd "$newname"
		exec 2>>"$error_log"
	fi
fi

finalizando_1 | $progreso --progress-text="Optimizando el sistema, por favor espere..." --title="Finalizando"

cp "$error_log" /target/var/log/
cleanup

yad $miicono --image=gtk-dialog-info --timeout 10 --fixed --center --width=500 --title="Instalador" --text-align=fill --borders=6 --button="Apagar":0 --button="Reiniciar":1 --button="Salir":2 --text=" Instalacion completa. \n\n Durante el primer inicio es posible que el sistema se reinicie automaticamente.\n\n Ejecute el post-instalador luego del primer inicio de su sistema.\n"
ans="$?"
case $ans in
	0) poweroff ;;
	1) reboot ;;
	2) exit 0 ;;
esac
exit 0
